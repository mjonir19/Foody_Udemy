package com.example.foody_udemy_training_2.ui.fragments.recipes

import android.os.Bundle
import android.util.Log
import android.view.*
import androidx.fragment.app.Fragment
import android.widget.Toast
import androidx.appcompat.widget.SearchView
import androidx.lifecycle.ViewModelProvider
import androidx.lifecycle.lifecycleScope
import androidx.navigation.fragment.findNavController
import androidx.navigation.fragment.navArgs
import androidx.recyclerview.widget.LinearLayoutManager
import com.example.foody_udemy_training_2.viewmodels.MainViewModel
import com.example.foody_udemy_training_2.R
import com.example.foody_udemy_training_2.adapters.RecipesAdapter
import com.example.foody_udemy_training_2.databinding.FragmentRecipesBinding
import com.example.foody_udemy_training_2.util.NetworkListener
import com.example.foody_udemy_training_2.util.NetworkResult
import com.example.foody_udemy_training_2.util.observeOnce
import com.example.foody_udemy_training_2.viewmodels.RecipesViewModel
import dagger.hilt.android.AndroidEntryPoint
import kotlinx.coroutines.ExperimentalCoroutinesApi
import kotlinx.coroutines.flow.collect
import kotlinx.coroutines.launch

@ExperimentalCoroutinesApi
@AndroidEntryPoint
// SearchView should be androidx.appcompat.widget.SearchView in import or it will not work
class RecipesFragment : Fragment(), SearchView.OnQueryTextListener {

    // RecipesFragmentArgs is autogenerated if you cant see it rebuild the project again
    private val args by navArgs<RecipesFragmentArgs>()

    private var _binding: FragmentRecipesBinding? = null
    private val binding get() = _binding!!

    private lateinit var mainViewModel: MainViewModel
    private lateinit var recipesViewModel: RecipesViewModel
    private val mAdapter by lazy { RecipesAdapter() }

    // created network listener variable
    private lateinit var networkListener: NetworkListener

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        mainViewModel = ViewModelProvider(requireActivity()).get(MainViewModel::class.java)
        recipesViewModel = ViewModelProvider(requireActivity()).get(RecipesViewModel::class.java)
    }

    override fun onCreateView(
        inflater: LayoutInflater, container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View {
        // Inflate the layout for this fragment
        _binding = FragmentRecipesBinding.inflate(inflater, container, false)
        binding.lifecycleOwner = this
        binding.mainViewModel = mainViewModel

        //for search implementation
        // this function will basically enable our menu item inside our recipesFragment and also our recipesFragment is now extending
        // this one query (SearchView.OnQueryTextListener) is extending
        setHasOptionsMenu(true)

        setupRecyclerView()
        //changed the first call for database
        //readDatabase()

        // inside this observer, we're going to get the latest value from our data store
        //and we're going to set that value to our backOnline, a variable inside our recipesViewModel
        recipesViewModel.readBackOnline.observe(viewLifecycleOwner) {
            recipesViewModel.backOnline = it
        }

        // for error change launchWhenStarted if we received crash error onDestroyView() coroutine
        lifecycleScope.launchWhenStarted {
            //Initialize NetworkListener and added annotation for NetworkListener
            networkListener = NetworkListener()
            // this function (checkNetworkAvailability) returns a MutableStateFlow which is a boolean value,
            // so we want to collect that boolean value from our recipe's fragment
            networkListener.checkNetworkAvailability(requireContext())
                // collect will have an error because it need to have a suspend or coroutine, so we added lifecycleScope.launch to remove that error
                .collect { status ->
                    Log.d("NetworkListener", status.toString())

                    // called network status and showNetworkStatus from recipesViewModel to implement the toast if there is no internet connection
                    recipesViewModel.networkStatus = status
                    recipesViewModel.showNetworkStatus()
                    // inserted function here cause whenever our network changes, we're going to call this readDatabase
                    readDatabase()
                }
        }

        binding.recipesFab.setOnClickListener {
            // added if/else statement that whenever we try to navigate to our bottom sheet without internet, we are not
            // we are not going to be able to open the bottom sheet
            if(recipesViewModel.networkStatus) {
                findNavController().navigate(R.id.action_recipesFragment_to_recipesBottomSheet)
            } else {
                recipesViewModel.showNetworkStatus()
            }
        }

        return binding.root
    }

    private fun setupRecyclerView() {
        binding.recyclerview.adapter = mAdapter
        binding.recyclerview.layoutManager = LinearLayoutManager(requireContext())
        showShimmerEffect()
    }

    //we need to override a method called onCreateOptions, to create our menu item
    override fun onCreateOptionsMenu(menu: Menu, inflater: MenuInflater) {
        // inflating our menu
        inflater.inflate(R.menu.recipes_menu, menu)

        val search = menu.findItem(R.id.menu_search)
        val searchView = search.actionView as? SearchView
        searchView?.isSubmitButtonEnabled = true
        searchView?.setOnQueryTextListener(this)
    }

    // populate these two function for (SearchView.OnQueryTextListener)
    override fun onQueryTextSubmit(query: String?): Boolean {
        if(query != null) {
            searchApiData(query)
        }
        return true
    }

    override fun onQueryTextChange(newText: String?): Boolean {
        return true
    }

    // implementing offline/database to not always run the API
    private fun readDatabase() {
        lifecycleScope.launch {
            mainViewModel.readRecipes.observeOnce(viewLifecycleOwner) { database ->
                // if the bottom sheet is closed the api will call
                if (database.isNotEmpty() && !args.backFromBottomSheet) {
                    // if the database is not empty then basically we want to read from our database
                    // if our database is not empty, that means that we already have some data and we want to
                    // display that data in our recyclerview

                    Log.e("RecipesFragment", "read database called!")
                    mAdapter.setData(database[0].foodRecipe)
                    hideShimmerEffect()
                } else {
                    requestApiData()
                }
            }
        }
    }

    private fun requestApiData() {
        Log.e("RecipesFragment", "requestApiDataCalled!")
        mainViewModel.getRecipes(recipesViewModel.applyQueries())
        mainViewModel.recipesResponse.observe(viewLifecycleOwner) { response ->
            when (response) {
                is NetworkResult.Success -> {
                    hideShimmerEffect()
                    response.data?.let { mAdapter.setData(it) }
                }
                is NetworkResult.Error -> {
                    hideShimmerEffect()
                    // added for cache data
                    loadDataFromCache()
                    Toast.makeText(
                        requireContext(),
                        response.message.toString(),
                        Toast.LENGTH_SHORT
                    ).show()
                }
                is NetworkResult.Loading -> {
                    showShimmerEffect()
                }
            }
        }
    }

    // creating a call api function for searching recipes and this function will be called in onQueryTextSubmit
    private fun searchApiData(searchQuery: String) {
        Log.e("RecipesFragment", "searchApiData! - $searchQuery")
        showShimmerEffect()
        mainViewModel.searchRecipes(recipesViewModel.applySearchQuery(searchQuery))
        mainViewModel.searchedRecipesResponse.observe(viewLifecycleOwner) { response ->
            when (response) {
                is NetworkResult.Success -> {
                    hideShimmerEffect()
                    val foodRecipe = response.data
                    foodRecipe?.let {mAdapter.setData(it)}
                }
                is NetworkResult.Error -> {
                    hideShimmerEffect()
                    loadDataFromCache()
                    Log.e("NetworkResult", response.message.toString())
                    Toast.makeText(
                        requireContext(),
                        response.message.toString(),
                        Toast.LENGTH_SHORT
                    ).show()
                }
                is NetworkResult.Loading -> {
                    showShimmerEffect()
                }
            }
        }
    }

    // live data is not actually suspend function or anything in "var readRecipes(MainViewModel)
    // so we're going to call a lifecycle scope
    private fun loadDataFromCache() {
        lifecycleScope.launch {
            mainViewModel.readRecipes.observe(viewLifecycleOwner) { database ->
                if(database.isNotEmpty()) {
                    mAdapter.setData(database[0].foodRecipe)
                }
            }
        }
    }

    private fun showShimmerEffect() {
        binding.recyclerview.showShimmer()
    }

    private fun hideShimmerEffect() {
        binding.recyclerview.hideShimmer()
    }

    override fun onDestroyView() {
        super.onDestroyView()
        _binding = null
    }

}